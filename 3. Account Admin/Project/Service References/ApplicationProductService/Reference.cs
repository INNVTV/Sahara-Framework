//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountAdminSite.ApplicationProductService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequesterType", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Platform.Requests.Models")]
    public enum RequesterType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlatformUser = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountUser = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exempt = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataAccessResponseType", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Common.ResponseTypes")]
    [System.SerializableAttribute()]
    public partial class DataAccessResponseType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ErrorMessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleInstanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuccessCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuccessMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SuccessMessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isSuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ErrorMessages {
            get {
                return this.ErrorMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessagesField, value) != true)) {
                    this.ErrorMessagesField = value;
                    this.RaisePropertyChanged("ErrorMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleInstance {
            get {
                return this.RoleInstanceField;
            }
            set {
                if ((this.RoleInstanceField.Equals(value) != true)) {
                    this.RoleInstanceField = value;
                    this.RaisePropertyChanged("RoleInstance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleName {
            get {
                return this.RoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleNameField, value) != true)) {
                    this.RoleNameField = value;
                    this.RaisePropertyChanged("RoleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SuccessCode {
            get {
                return this.SuccessCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SuccessCodeField, value) != true)) {
                    this.SuccessCodeField = value;
                    this.RaisePropertyChanged("SuccessCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SuccessMessage {
            get {
                return this.SuccessMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.SuccessMessageField, value) != true)) {
                    this.SuccessMessageField = value;
                    this.RaisePropertyChanged("SuccessMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SuccessMessages {
            get {
                return this.SuccessMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.SuccessMessagesField, value) != true)) {
                    this.SuccessMessagesField = value;
                    this.RaisePropertyChanged("SuccessMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isSuccess {
            get {
                return this.isSuccessField;
            }
            set {
                if ((this.isSuccessField.Equals(value) != true)) {
                    this.isSuccessField = value;
                    this.RaisePropertyChanged("isSuccess");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductDocumentModel", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Application.DocumentModels.Pr" +
        "oduct")]
    [System.SerializableAttribute()]
    public partial class ProductDocumentModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTimeOffset DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullyQualifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, AccountAdminSite.ApplicationProductService.PropertyLocationValue> LocationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string[]> PredefinedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubcategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubcategoryNameKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubsubcategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubsubcategoryNameKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubsubsubcategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubsubsubcategoryNameKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, AccountAdminSite.ApplicationProductService.Swatch[]> SwatchesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] TagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VisibleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryNameKey {
            get {
                return this.CategoryNameKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameKeyField, value) != true)) {
                    this.CategoryNameKeyField = value;
                    this.RaisePropertyChanged("CategoryNameKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentType {
            get {
                return this.DocumentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentTypeField, value) != true)) {
                    this.DocumentTypeField = value;
                    this.RaisePropertyChanged("DocumentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullyQualifiedName {
            get {
                return this.FullyQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullyQualifiedNameField, value) != true)) {
                    this.FullyQualifiedNameField = value;
                    this.RaisePropertyChanged("FullyQualifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationPath {
            get {
                return this.LocationPathField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationPathField, value) != true)) {
                    this.LocationPathField = value;
                    this.RaisePropertyChanged("LocationPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, AccountAdminSite.ApplicationProductService.PropertyLocationValue> Locations {
            get {
                return this.LocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationsField, value) != true)) {
                    this.LocationsField = value;
                    this.RaisePropertyChanged("Locations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameKey {
            get {
                return this.NameKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.NameKeyField, value) != true)) {
                    this.NameKeyField = value;
                    this.RaisePropertyChanged("NameKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string[]> Predefined {
            get {
                return this.PredefinedField;
            }
            set {
                if ((object.ReferenceEquals(this.PredefinedField, value) != true)) {
                    this.PredefinedField = value;
                    this.RaisePropertyChanged("Predefined");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubcategoryName {
            get {
                return this.SubcategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubcategoryNameField, value) != true)) {
                    this.SubcategoryNameField = value;
                    this.RaisePropertyChanged("SubcategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubcategoryNameKey {
            get {
                return this.SubcategoryNameKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.SubcategoryNameKeyField, value) != true)) {
                    this.SubcategoryNameKeyField = value;
                    this.RaisePropertyChanged("SubcategoryNameKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubsubcategoryName {
            get {
                return this.SubsubcategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubsubcategoryNameField, value) != true)) {
                    this.SubsubcategoryNameField = value;
                    this.RaisePropertyChanged("SubsubcategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubsubcategoryNameKey {
            get {
                return this.SubsubcategoryNameKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.SubsubcategoryNameKeyField, value) != true)) {
                    this.SubsubcategoryNameKeyField = value;
                    this.RaisePropertyChanged("SubsubcategoryNameKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubsubsubcategoryName {
            get {
                return this.SubsubsubcategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubsubsubcategoryNameField, value) != true)) {
                    this.SubsubsubcategoryNameField = value;
                    this.RaisePropertyChanged("SubsubsubcategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubsubsubcategoryNameKey {
            get {
                return this.SubsubsubcategoryNameKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.SubsubsubcategoryNameKeyField, value) != true)) {
                    this.SubsubsubcategoryNameKeyField = value;
                    this.RaisePropertyChanged("SubsubsubcategoryNameKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, AccountAdminSite.ApplicationProductService.Swatch[]> Swatches {
            get {
                return this.SwatchesField;
            }
            set {
                if ((object.ReferenceEquals(this.SwatchesField, value) != true)) {
                    this.SwatchesField = value;
                    this.RaisePropertyChanged("Swatches");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Visible {
            get {
                return this.VisibleField;
            }
            set {
                if ((this.VisibleField.Equals(value) != true)) {
                    this.VisibleField = value;
                    this.RaisePropertyChanged("Visible");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyLocationValue", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Application.DocumentModels.Pr" +
        "oduct")]
    [System.SerializableAttribute()]
    public partial class PropertyLocationValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Address2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LongField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address1 {
            get {
                return this.Address1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address1Field, value) != true)) {
                    this.Address1Field = value;
                    this.RaisePropertyChanged("Address1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address2 {
            get {
                return this.Address2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Address2Field, value) != true)) {
                    this.Address2Field = value;
                    this.RaisePropertyChanged("Address2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lat {
            get {
                return this.LatField;
            }
            set {
                if ((object.ReferenceEquals(this.LatField, value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Long {
            get {
                return this.LongField;
            }
            set {
                if ((object.ReferenceEquals(this.LongField, value) != true)) {
                    this.LongField = value;
                    this.RaisePropertyChanged("Long");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalCode {
            get {
                return this.PostalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalCodeField, value) != true)) {
                    this.PostalCodeField = value;
                    this.RaisePropertyChanged("PostalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Swatch", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Application.DocumentModels.Pr" +
        "oduct")]
    [System.SerializableAttribute()]
    public partial class Swatch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageMediumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageSmallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageMedium {
            get {
                return this.ImageMediumField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageMediumField, value) != true)) {
                    this.ImageMediumField = value;
                    this.RaisePropertyChanged("ImageMedium");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageSmall {
            get {
                return this.ImageSmallField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageSmallField, value) != true)) {
                    this.ImageSmallField = value;
                    this.RaisePropertyChanged("ImageSmall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductPropertyUpdateType", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Common.Types")]
    public enum ProductPropertyUpdateType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Replace = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Append = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApplicationProductService.IApplicationProductService")]
    public interface IApplicationProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/CreateProduct", ReplyAction="http://tempuri.org/IApplicationProductService/CreateProductResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType CreateProduct(string accountId, string locationPath, string productName, bool isVisible, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/CreateProduct", ReplyAction="http://tempuri.org/IApplicationProductService/CreateProductResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> CreateProductAsync(string accountId, string locationPath, string productName, bool isVisible, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/GetProduct", ReplyAction="http://tempuri.org/IApplicationProductService/GetProductResponse")]
        AccountAdminSite.ApplicationProductService.ProductDocumentModel GetProduct(string productId, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/GetProduct", ReplyAction="http://tempuri.org/IApplicationProductService/GetProductResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.ProductDocumentModel> GetProductAsync(string productId, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/UpdateProductVisibleState", ReplyAction="http://tempuri.org/IApplicationProductService/UpdateProductVisibleStateResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType UpdateProductVisibleState(string accountId, string fullyQualifiedName, string productName, bool visibleState, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/UpdateProductVisibleState", ReplyAction="http://tempuri.org/IApplicationProductService/UpdateProductVisibleStateResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> UpdateProductVisibleStateAsync(string accountId, string fullyQualifiedName, string productName, bool visibleState, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/RenameProduct", ReplyAction="http://tempuri.org/IApplicationProductService/RenameProductResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType RenameProduct(string accountId, string fullyQualifiedName, string oldName, string newName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/RenameProduct", ReplyAction="http://tempuri.org/IApplicationProductService/RenameProductResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> RenameProductAsync(string accountId, string fullyQualifiedName, string oldName, string newName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/ReorderProducts", ReplyAction="http://tempuri.org/IApplicationProductService/ReorderProductsResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType ReorderProducts(string accountId, System.Collections.Generic.Dictionary<string, int> productOrderingDictionary, string locationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/ReorderProducts", ReplyAction="http://tempuri.org/IApplicationProductService/ReorderProductsResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> ReorderProductsAsync(string accountId, System.Collections.Generic.Dictionary<string, int> productOrderingDictionary, string locationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/ResetProductOrdering", ReplyAction="http://tempuri.org/IApplicationProductService/ResetProductOrderingResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType ResetProductOrdering(string accountId, string locationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/ResetProductOrdering", ReplyAction="http://tempuri.org/IApplicationProductService/ResetProductOrderingResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> ResetProductOrderingAsync(string accountId, string locationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/UpdateProductProperty", ReplyAction="http://tempuri.org/IApplicationProductService/UpdateProductPropertyResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType UpdateProductProperty(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, string propertyValue, AccountAdminSite.ApplicationProductService.ProductPropertyUpdateType updateType, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/UpdateProductProperty", ReplyAction="http://tempuri.org/IApplicationProductService/UpdateProductPropertyResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> UpdateProductPropertyAsync(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, string propertyValue, AccountAdminSite.ApplicationProductService.ProductPropertyUpdateType updateType, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/UpdateProductLocationProperty", ReplyAction="http://tempuri.org/IApplicationProductService/UpdateProductLocationPropertyRespon" +
            "se")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType UpdateProductLocationProperty(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, AccountAdminSite.ApplicationProductService.PropertyLocationValue propertyLocationValue, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/UpdateProductLocationProperty", ReplyAction="http://tempuri.org/IApplicationProductService/UpdateProductLocationPropertyRespon" +
            "se")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> UpdateProductLocationPropertyAsync(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, AccountAdminSite.ApplicationProductService.PropertyLocationValue propertyLocationValue, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/RemoveProductPropertyCollectionItem" +
            "", ReplyAction="http://tempuri.org/IApplicationProductService/RemoveProductPropertyCollectionItem" +
            "Response")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType RemoveProductPropertyCollectionItem(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, int collectionItemIndex, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/RemoveProductPropertyCollectionItem" +
            "", ReplyAction="http://tempuri.org/IApplicationProductService/RemoveProductPropertyCollectionItem" +
            "Response")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> RemoveProductPropertyCollectionItemAsync(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, int collectionItemIndex, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/ClearProductProperty", ReplyAction="http://tempuri.org/IApplicationProductService/ClearProductPropertyResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType ClearProductProperty(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/ClearProductProperty", ReplyAction="http://tempuri.org/IApplicationProductService/ClearProductPropertyResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> ClearProductPropertyAsync(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/AddProductTag", ReplyAction="http://tempuri.org/IApplicationProductService/AddProductTagResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType AddProductTag(string accountId, string fullyQualifiedName, string productName, string tagName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/AddProductTag", ReplyAction="http://tempuri.org/IApplicationProductService/AddProductTagResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> AddProductTagAsync(string accountId, string fullyQualifiedName, string productName, string tagName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/RemoveProductTag", ReplyAction="http://tempuri.org/IApplicationProductService/RemoveProductTagResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType RemoveProductTag(string accountId, string fullyQualifiedName, string productName, string tagName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/RemoveProductTag", ReplyAction="http://tempuri.org/IApplicationProductService/RemoveProductTagResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> RemoveProductTagAsync(string accountId, string fullyQualifiedName, string productName, string tagName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/MoveProduct", ReplyAction="http://tempuri.org/IApplicationProductService/MoveProductResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType MoveProduct(string accountId, string productId, string newLocationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/MoveProduct", ReplyAction="http://tempuri.org/IApplicationProductService/MoveProductResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> MoveProductAsync(string accountId, string productId, string newLocationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/DeleteProduct", ReplyAction="http://tempuri.org/IApplicationProductService/DeleteProductResponse")]
        AccountAdminSite.ApplicationProductService.DataAccessResponseType DeleteProduct(string accountId, string productId, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationProductService/DeleteProduct", ReplyAction="http://tempuri.org/IApplicationProductService/DeleteProductResponse")]
        System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> DeleteProductAsync(string accountId, string productId, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicationProductServiceChannel : AccountAdminSite.ApplicationProductService.IApplicationProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplicationProductServiceClient : System.ServiceModel.ClientBase<AccountAdminSite.ApplicationProductService.IApplicationProductService>, AccountAdminSite.ApplicationProductService.IApplicationProductService {
        
        public ApplicationProductServiceClient() {
        }
        
        public ApplicationProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ApplicationProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType CreateProduct(string accountId, string locationPath, string productName, bool isVisible, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.CreateProduct(accountId, locationPath, productName, isVisible, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> CreateProductAsync(string accountId, string locationPath, string productName, bool isVisible, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.CreateProductAsync(accountId, locationPath, productName, isVisible, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.ProductDocumentModel GetProduct(string productId, string sharedClientKey) {
            return base.Channel.GetProduct(productId, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.ProductDocumentModel> GetProductAsync(string productId, string sharedClientKey) {
            return base.Channel.GetProductAsync(productId, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType UpdateProductVisibleState(string accountId, string fullyQualifiedName, string productName, bool visibleState, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.UpdateProductVisibleState(accountId, fullyQualifiedName, productName, visibleState, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> UpdateProductVisibleStateAsync(string accountId, string fullyQualifiedName, string productName, bool visibleState, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.UpdateProductVisibleStateAsync(accountId, fullyQualifiedName, productName, visibleState, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType RenameProduct(string accountId, string fullyQualifiedName, string oldName, string newName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.RenameProduct(accountId, fullyQualifiedName, oldName, newName, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> RenameProductAsync(string accountId, string fullyQualifiedName, string oldName, string newName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.RenameProductAsync(accountId, fullyQualifiedName, oldName, newName, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType ReorderProducts(string accountId, System.Collections.Generic.Dictionary<string, int> productOrderingDictionary, string locationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.ReorderProducts(accountId, productOrderingDictionary, locationPath, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> ReorderProductsAsync(string accountId, System.Collections.Generic.Dictionary<string, int> productOrderingDictionary, string locationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.ReorderProductsAsync(accountId, productOrderingDictionary, locationPath, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType ResetProductOrdering(string accountId, string locationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.ResetProductOrdering(accountId, locationPath, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> ResetProductOrderingAsync(string accountId, string locationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.ResetProductOrderingAsync(accountId, locationPath, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType UpdateProductProperty(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, string propertyValue, AccountAdminSite.ApplicationProductService.ProductPropertyUpdateType updateType, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.UpdateProductProperty(accountId, fullyQualifiedName, productName, propertyNameKey, propertyValue, updateType, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> UpdateProductPropertyAsync(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, string propertyValue, AccountAdminSite.ApplicationProductService.ProductPropertyUpdateType updateType, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.UpdateProductPropertyAsync(accountId, fullyQualifiedName, productName, propertyNameKey, propertyValue, updateType, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType UpdateProductLocationProperty(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, AccountAdminSite.ApplicationProductService.PropertyLocationValue propertyLocationValue, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.UpdateProductLocationProperty(accountId, fullyQualifiedName, productName, propertyNameKey, propertyLocationValue, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> UpdateProductLocationPropertyAsync(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, AccountAdminSite.ApplicationProductService.PropertyLocationValue propertyLocationValue, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.UpdateProductLocationPropertyAsync(accountId, fullyQualifiedName, productName, propertyNameKey, propertyLocationValue, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType RemoveProductPropertyCollectionItem(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, int collectionItemIndex, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.RemoveProductPropertyCollectionItem(accountId, fullyQualifiedName, productName, propertyNameKey, collectionItemIndex, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> RemoveProductPropertyCollectionItemAsync(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, int collectionItemIndex, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.RemoveProductPropertyCollectionItemAsync(accountId, fullyQualifiedName, productName, propertyNameKey, collectionItemIndex, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType ClearProductProperty(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.ClearProductProperty(accountId, fullyQualifiedName, productName, propertyNameKey, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> ClearProductPropertyAsync(string accountId, string fullyQualifiedName, string productName, string propertyNameKey, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.ClearProductPropertyAsync(accountId, fullyQualifiedName, productName, propertyNameKey, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType AddProductTag(string accountId, string fullyQualifiedName, string productName, string tagName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.AddProductTag(accountId, fullyQualifiedName, productName, tagName, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> AddProductTagAsync(string accountId, string fullyQualifiedName, string productName, string tagName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.AddProductTagAsync(accountId, fullyQualifiedName, productName, tagName, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType RemoveProductTag(string accountId, string fullyQualifiedName, string productName, string tagName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.RemoveProductTag(accountId, fullyQualifiedName, productName, tagName, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> RemoveProductTagAsync(string accountId, string fullyQualifiedName, string productName, string tagName, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.RemoveProductTagAsync(accountId, fullyQualifiedName, productName, tagName, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType MoveProduct(string accountId, string productId, string newLocationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.MoveProduct(accountId, productId, newLocationPath, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> MoveProductAsync(string accountId, string productId, string newLocationPath, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.MoveProductAsync(accountId, productId, newLocationPath, requesterId, requesterType, sharedClientKey);
        }
        
        public AccountAdminSite.ApplicationProductService.DataAccessResponseType DeleteProduct(string accountId, string productId, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.DeleteProduct(accountId, productId, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<AccountAdminSite.ApplicationProductService.DataAccessResponseType> DeleteProductAsync(string accountId, string productId, string requesterId, AccountAdminSite.ApplicationProductService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.DeleteProductAsync(accountId, productId, requesterId, requesterType, sharedClientKey);
        }
    }
}
