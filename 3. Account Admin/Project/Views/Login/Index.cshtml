@model AccountAdminSite.Models.Authentication.Login
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_BackgroundImageLayout.cshtml"; //<-- Switch to _PublicLayout to remove Background Image
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <div class="container">
        <div class="col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4 col-lg-4 col col-lg-offset-4">
            <div style="text-align:center; margin-top:25px; margin-bottom:25px">
                <img src="~/Images/Logos/sahara-logo-login-ko-md.png" />
            </div>
            @if (!ViewData.ModelState.IsValid)
            {

                //Used to show CoreService Errors at the top:
                if (@ViewData.ModelState["CoreServiceError"] != null)
                {
                    <div style="margin-bottom: 25px; color: red; text-align: center;">
                        <h5><strong>@ViewData.ModelState["CoreServiceError"].Errors[0].ErrorMessage</strong></h5>
                    </div>
                }

                /*Use for a listing of errors @ the top of the page:
                foreach (ModelState modelState in ViewData.ModelState.Values)
                {
                    foreach (ModelError error in modelState.Errors)
                    {
                        <div style="margin-bottom:25px; color:red; text-align:center;">
                            <h5><strong>@error.ErrorMessage</strong></h5>
                        </div>
                    }

                }*/
            }


            <!--If no subdomain present, user must manually enter: -->
            @if (Model.AccountName == null)
            {
                <div class="form-group">
                    @if (!ViewData.ModelState.IsValid && ViewData.ModelState["AccountName"].Errors.Count() > 0)
                    {
                        <div style="margin-bottom:-2px; color:red; text-align:left;">
                            <h5><strong>@ViewData.ModelState["AccountName"].Errors[0].ErrorMessage</strong></h5>
                        </div>
                    }
                    <input type="text" name="accountName" class="form-control input-lg
                           @if (!ViewData.ModelState.IsValid && ViewData.ModelState["AccountName"].Errors.Count() > 0) { <text> field-validation-error input-validation-error</text>}"
                           placeholder="Account Name" value="@ViewData.Model.AccountName">
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.AccountName)
            }



            <div class="form-group">
                @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Email"].Errors.Count() > 0)
                {
                    <div style="margin-bottom:-2px; color:red; text-align:left;">
                        <h5><strong>@ViewData.ModelState["Email"].Errors[0].ErrorMessage</strong></h5>
                    </div>
                }
                <input type="text" name="email" class="form-control input-lg
                       @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Email"].Errors.Count() > 0) { <text> field-validation-error input-validation-error</text>}"
                       placeholder="Email" value="@ViewData.Model.Email">
            </div>
            <div class="form-group">
                @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Password"].Errors.Count() > 0)
                {
                    <div style="margin-bottom:-2px; color:red; text-align:left;">
                        <h5><strong>@ViewData.ModelState["Password"].Errors[0].ErrorMessage</strong></h5>
                    </div>
                }
                <input type="password" name="password" class="form-control input-lg
                       @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Password"].Errors.Count() > 0) { <text> field-validation-error input-validation-error</text>}"
                       placeholder="Password">
            </div>
            <div class="form-group">
                <button class="btn btn-warning btn-lg btn-block" style="color:black">Sign In</button>

                @if (Model.AccountName != null)
                {
                    //Only show reset password if this is a known subdomain
                    <div style="margin-top:15px; color: white">Forgot your password? <a href="~/password/forgot">Reset it</a></div>
                }
                <!--<span><a href="#">Need help?</a></span>
                    <span class="pull-right"><a href="#">New Registration</a></span>-->
            </div>
        </div>

    </div>

        <!--<div class="form-group">
            @Html.LabelFor(model => model.RememberMe)
            <div class=".col-md-6 .col-md-offset-3">
                @Html.EditorFor(model => model.RememberMe)
                @Html.ValidationMessageFor(model => model.RememberMe)
            </div>
        </div>-->
}

