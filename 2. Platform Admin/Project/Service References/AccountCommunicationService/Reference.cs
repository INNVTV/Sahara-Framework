//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlatformAdminSite.AccountCommunicationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationStatus", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Accounts.Notifications.Models" +
        "")]
    public enum NotificationStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unread = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Read = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpiredUnread = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpiredRead = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClearedUnread = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserNotification", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Accounts.Notifications.Models" +
        "")]
    [System.SerializableAttribute()]
    public partial class UserNotification : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ExpirationMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExpiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdatedDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotificationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotificationMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotificationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDateTime {
            get {
                return this.CreatedDateTimeField;
            }
            set {
                if ((this.CreatedDateTimeField.Equals(value) != true)) {
                    this.CreatedDateTimeField = value;
                    this.RaisePropertyChanged("CreatedDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDateTime {
            get {
                return this.ExpirationDateTimeField;
            }
            set {
                if ((this.ExpirationDateTimeField.Equals(value) != true)) {
                    this.ExpirationDateTimeField = value;
                    this.RaisePropertyChanged("ExpirationDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ExpirationMinutes {
            get {
                return this.ExpirationMinutesField;
            }
            set {
                if ((this.ExpirationMinutesField.Equals(value) != true)) {
                    this.ExpirationMinutesField = value;
                    this.RaisePropertyChanged("ExpirationMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Expired {
            get {
                return this.ExpiredField;
            }
            set {
                if ((this.ExpiredField.Equals(value) != true)) {
                    this.ExpiredField = value;
                    this.RaisePropertyChanged("Expired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdatedDateTime {
            get {
                return this.LastUpdatedDateTimeField;
            }
            set {
                if ((this.LastUpdatedDateTimeField.Equals(value) != true)) {
                    this.LastUpdatedDateTimeField = value;
                    this.RaisePropertyChanged("LastUpdatedDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotificationId {
            get {
                return this.NotificationIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationIdField, value) != true)) {
                    this.NotificationIdField = value;
                    this.RaisePropertyChanged("NotificationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotificationMessage {
            get {
                return this.NotificationMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationMessageField, value) != true)) {
                    this.NotificationMessageField = value;
                    this.RaisePropertyChanged("NotificationMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotificationType {
            get {
                return this.NotificationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationTypeField, value) != true)) {
                    this.NotificationTypeField = value;
                    this.RaisePropertyChanged("NotificationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationType", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Accounts.Notifications.Models" +
        "")]
    public enum NotificationType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Alert = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataAccessResponseType", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Common.ResponseTypes")]
    [System.SerializableAttribute()]
    public partial class DataAccessResponseType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ErrorMessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleInstanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuccessCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuccessMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SuccessMessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isSuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ErrorMessages {
            get {
                return this.ErrorMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessagesField, value) != true)) {
                    this.ErrorMessagesField = value;
                    this.RaisePropertyChanged("ErrorMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleInstance {
            get {
                return this.RoleInstanceField;
            }
            set {
                if ((this.RoleInstanceField.Equals(value) != true)) {
                    this.RoleInstanceField = value;
                    this.RaisePropertyChanged("RoleInstance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleName {
            get {
                return this.RoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleNameField, value) != true)) {
                    this.RoleNameField = value;
                    this.RaisePropertyChanged("RoleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SuccessCode {
            get {
                return this.SuccessCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SuccessCodeField, value) != true)) {
                    this.SuccessCodeField = value;
                    this.RaisePropertyChanged("SuccessCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SuccessMessage {
            get {
                return this.SuccessMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.SuccessMessageField, value) != true)) {
                    this.SuccessMessageField = value;
                    this.RaisePropertyChanged("SuccessMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] SuccessMessages {
            get {
                return this.SuccessMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.SuccessMessagesField, value) != true)) {
                    this.SuccessMessagesField = value;
                    this.RaisePropertyChanged("SuccessMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isSuccess {
            get {
                return this.isSuccessField;
            }
            set {
                if ((this.isSuccessField.Equals(value) != true)) {
                    this.isSuccessField = value;
                    this.RaisePropertyChanged("isSuccess");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequesterType", Namespace="http://schemas.datacontract.org/2004/07/Sahara.Core.Platform.Requests.Models")]
    public enum RequesterType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlatformUser = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountUser = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exempt = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountCommunicationService.IAccountCommunicationService")]
    public interface IAccountCommunicationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/GetAccountUserNotifications", ReplyAction="http://tempuri.org/IAccountCommunicationService/GetAccountUserNotificationsRespon" +
            "se")]
        PlatformAdminSite.AccountCommunicationService.UserNotification[] GetAccountUserNotifications(PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string userId, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/GetAccountUserNotifications", ReplyAction="http://tempuri.org/IAccountCommunicationService/GetAccountUserNotificationsRespon" +
            "se")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.UserNotification[]> GetAccountUserNotificationsAsync(PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string userId, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/GetAccountUserNotificationsByType" +
            "", ReplyAction="http://tempuri.org/IAccountCommunicationService/GetAccountUserNotificationsByType" +
            "Response")]
        PlatformAdminSite.AccountCommunicationService.UserNotification[] GetAccountUserNotificationsByType(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string userId, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/GetAccountUserNotificationsByType" +
            "", ReplyAction="http://tempuri.org/IAccountCommunicationService/GetAccountUserNotificationsByType" +
            "Response")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.UserNotification[]> GetAccountUserNotificationsByTypeAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string userId, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/UpdateNotificationStatus", ReplyAction="http://tempuri.org/IAccountCommunicationService/UpdateNotificationStatusResponse")]
        PlatformAdminSite.AccountCommunicationService.DataAccessResponseType UpdateNotificationStatus(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string currentStatus, string userId, string notificationMessageId, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/UpdateNotificationStatus", ReplyAction="http://tempuri.org/IAccountCommunicationService/UpdateNotificationStatusResponse")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> UpdateNotificationStatusAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string currentStatus, string userId, string notificationMessageId, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendNotificationToUser", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendNotificationToUserResponse")]
        PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendNotificationToUser(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string userId, string notificationMessage, double expirationMinutes, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendNotificationToUser", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendNotificationToUserResponse")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendNotificationToUserAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string userId, string notificationMessage, double expirationMinutes, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendNotificationToAccount", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendNotificationToAccountResponse" +
            "")]
        PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendNotificationToAccount(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string accountId, string notificationMessage, double expirationMinutes, bool accountOwnersOnly, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendNotificationToAccount", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendNotificationToAccountResponse" +
            "")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendNotificationToAccountAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string accountId, string notificationMessage, double expirationMinutes, bool accountOwnersOnly, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendNotificationToBulkAccounts", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendNotificationToBulkAccountsRes" +
            "ponse")]
        PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendNotificationToBulkAccounts(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string notificationMessage, double expirationMinutes, bool accountOwnersOnly, string columnName, string columnValue, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendNotificationToBulkAccounts", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendNotificationToBulkAccountsRes" +
            "ponse")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendNotificationToBulkAccountsAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string notificationMessage, double expirationMinutes, bool accountOwnersOnly, string columnName, string columnValue, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendEmailToUser", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendEmailToUserResponse")]
        PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendEmailToUser(string userId, string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendEmailToUser", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendEmailToUserResponse")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendEmailToUserAsync(string userId, string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendEmailToAccount", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendEmailToAccountResponse")]
        PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendEmailToAccount(string accountId, string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, bool accountOwnersOnly, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendEmailToAccount", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendEmailToAccountResponse")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendEmailToAccountAsync(string accountId, string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, bool accountOwnersOnly, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendEmailToBulkAccounts", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendEmailToBulkAccountsResponse")]
        PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendEmailToBulkAccounts(string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, bool accountOwnersOnly, string columnName, string columnValue, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountCommunicationService/SendEmailToBulkAccounts", ReplyAction="http://tempuri.org/IAccountCommunicationService/SendEmailToBulkAccountsResponse")]
        System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendEmailToBulkAccountsAsync(string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, bool accountOwnersOnly, string columnName, string columnValue, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountCommunicationServiceChannel : PlatformAdminSite.AccountCommunicationService.IAccountCommunicationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountCommunicationServiceClient : System.ServiceModel.ClientBase<PlatformAdminSite.AccountCommunicationService.IAccountCommunicationService>, PlatformAdminSite.AccountCommunicationService.IAccountCommunicationService {
        
        public AccountCommunicationServiceClient() {
        }
        
        public AccountCommunicationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountCommunicationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountCommunicationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountCommunicationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PlatformAdminSite.AccountCommunicationService.UserNotification[] GetAccountUserNotifications(PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string userId, string sharedClientKey) {
            return base.Channel.GetAccountUserNotifications(notificationStatus, userId, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.UserNotification[]> GetAccountUserNotificationsAsync(PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string userId, string sharedClientKey) {
            return base.Channel.GetAccountUserNotificationsAsync(notificationStatus, userId, sharedClientKey);
        }
        
        public PlatformAdminSite.AccountCommunicationService.UserNotification[] GetAccountUserNotificationsByType(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string userId, string sharedClientKey) {
            return base.Channel.GetAccountUserNotificationsByType(notificationType, notificationStatus, userId, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.UserNotification[]> GetAccountUserNotificationsByTypeAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string userId, string sharedClientKey) {
            return base.Channel.GetAccountUserNotificationsByTypeAsync(notificationType, notificationStatus, userId, sharedClientKey);
        }
        
        public PlatformAdminSite.AccountCommunicationService.DataAccessResponseType UpdateNotificationStatus(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string currentStatus, string userId, string notificationMessageId, string sharedClientKey) {
            return base.Channel.UpdateNotificationStatus(notificationType, notificationStatus, currentStatus, userId, notificationMessageId, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> UpdateNotificationStatusAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, PlatformAdminSite.AccountCommunicationService.NotificationStatus notificationStatus, string currentStatus, string userId, string notificationMessageId, string sharedClientKey) {
            return base.Channel.UpdateNotificationStatusAsync(notificationType, notificationStatus, currentStatus, userId, notificationMessageId, sharedClientKey);
        }
        
        public PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendNotificationToUser(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string userId, string notificationMessage, double expirationMinutes, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendNotificationToUser(notificationType, userId, notificationMessage, expirationMinutes, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendNotificationToUserAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string userId, string notificationMessage, double expirationMinutes, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendNotificationToUserAsync(notificationType, userId, notificationMessage, expirationMinutes, requesterId, requesterType, sharedClientKey);
        }
        
        public PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendNotificationToAccount(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string accountId, string notificationMessage, double expirationMinutes, bool accountOwnersOnly, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendNotificationToAccount(notificationType, accountId, notificationMessage, expirationMinutes, accountOwnersOnly, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendNotificationToAccountAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string accountId, string notificationMessage, double expirationMinutes, bool accountOwnersOnly, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendNotificationToAccountAsync(notificationType, accountId, notificationMessage, expirationMinutes, accountOwnersOnly, requesterId, requesterType, sharedClientKey);
        }
        
        public PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendNotificationToBulkAccounts(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string notificationMessage, double expirationMinutes, bool accountOwnersOnly, string columnName, string columnValue, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendNotificationToBulkAccounts(notificationType, notificationMessage, expirationMinutes, accountOwnersOnly, columnName, columnValue, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendNotificationToBulkAccountsAsync(PlatformAdminSite.AccountCommunicationService.NotificationType notificationType, string notificationMessage, double expirationMinutes, bool accountOwnersOnly, string columnName, string columnValue, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendNotificationToBulkAccountsAsync(notificationType, notificationMessage, expirationMinutes, accountOwnersOnly, columnName, columnValue, requesterId, requesterType, sharedClientKey);
        }
        
        public PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendEmailToUser(string userId, string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendEmailToUser(userId, fromName, fromEmail, emailSubject, emailMessage, isImportant, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendEmailToUserAsync(string userId, string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendEmailToUserAsync(userId, fromName, fromEmail, emailSubject, emailMessage, isImportant, requesterId, requesterType, sharedClientKey);
        }
        
        public PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendEmailToAccount(string accountId, string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, bool accountOwnersOnly, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendEmailToAccount(accountId, fromName, fromEmail, emailSubject, emailMessage, isImportant, accountOwnersOnly, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendEmailToAccountAsync(string accountId, string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, bool accountOwnersOnly, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendEmailToAccountAsync(accountId, fromName, fromEmail, emailSubject, emailMessage, isImportant, accountOwnersOnly, requesterId, requesterType, sharedClientKey);
        }
        
        public PlatformAdminSite.AccountCommunicationService.DataAccessResponseType SendEmailToBulkAccounts(string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, bool accountOwnersOnly, string columnName, string columnValue, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendEmailToBulkAccounts(fromName, fromEmail, emailSubject, emailMessage, isImportant, accountOwnersOnly, columnName, columnValue, requesterId, requesterType, sharedClientKey);
        }
        
        public System.Threading.Tasks.Task<PlatformAdminSite.AccountCommunicationService.DataAccessResponseType> SendEmailToBulkAccountsAsync(string fromName, string fromEmail, string emailSubject, string emailMessage, bool isImportant, bool accountOwnersOnly, string columnName, string columnValue, string requesterId, PlatformAdminSite.AccountCommunicationService.RequesterType requesterType, string sharedClientKey) {
            return base.Channel.SendEmailToBulkAccountsAsync(fromName, fromEmail, emailSubject, emailMessage, isImportant, accountOwnersOnly, columnName, columnValue, requesterId, requesterType, sharedClientKey);
        }
    }
}
