using Newtonsoft.Json;
using Sahara.Core.Accounts.PaymentPlans.Internal;
using Sahara.Core.Accounts.PaymentPlans.Models;
using Sahara.Core.Logging.PlatformLogs;
using Sahara.Core.Logging.PlatformLogs.Types;
using Sahara.Core.Common.Methods;
using Sahara.Core.Common.Redis;
using Sahara.Core.Common.Redis.AccountManagerServer.Hashes;
using Sahara.Core.Common.ResponseTypes;
using Sahara.Core.Common.Services.Stripe;
using Sahara.Core.Common.Validation;
using StackExchange.Redis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Sahara.Core.Logging.PlatformLogs.Helpers;
using Sahara.Core.Platform.Partitioning.Public;

namespace Sahara.Core.Accounts.PaymentPlans.Public
{
    public static class PaymentPlanManager
    {

        #region Refactoring Notes

        /*
            Yearly plans wth IntervalCount of 1 are the maximum available on Stripe, If weeks are required, some refactoring of business logic will be needed as all UI's and parts of CoreServices use the PaymentFrequencyMonths integer to calculate plan costs and discounts. 
            PaymentPlans have a MonthlyRate property that is used to calculate against 'Frequencies'. If week-based intervals are required, some refactoring will need to occur.
            When a new plan is created (or generated by platform initialization) the associated Stripe PlanId's are generated via the Sahara.Core.Common.Methods.PaymentPlans class. Concatinating 'IntervalCount' + 'Interval' with lowered casing and replacing white spaces with "-" (for each plan/frequency variation).
        */

        #endregion

        #region Get

        #region Lists

        public static List<PaymentPlan> GetPaymentPlans(bool includeHiddenPlans, bool orderByRateAsc, bool useCachedVersion = true)
        {
            
            try
            {
                List<PaymentPlan> paymentPlansCache = null;
                //IDatabase cache = Sahara.Core.Settings.Azure.Redis.RedisMultiplexers.AccountManager_Multiplexer.GetDatabase();
                IDatabase cache = Sahara.Core.Settings.Azure.Redis.RedisMultiplexers.RedisMultiplexer.GetDatabase();
                string redisHashField = PaymentPlansHash.Fields.PaymentPlansList(includeHiddenPlans, orderByRateAsc);  

                if (useCachedVersion)
                {
                    try
                    {
                        var redisValue = cache.HashGet(PaymentPlansHash.Key, redisHashField); 
                        if (redisValue.HasValue)
                        {
                            paymentPlansCache = JsonConvert.DeserializeObject<List<PaymentPlan>>(redisValue);
                        }
                    }
                    catch
                    {

                    }

                }

                if (paymentPlansCache == null)
                {
                    var paymentPlans = Sql.Statements.SelectStatements.SelectPaymentPlans(includeHiddenPlans, orderByRateAsc);

                    //Assign alternate rates:
                    foreach (var paymentPlan in paymentPlans)
                    {
                        paymentPlan.AlternateRates = Internal.AlternateRates.AssignAlternateRates(paymentPlan.MonthlyRate);
                        //paymentPlan.StripeVarients = Internal.AlternateRates.AssignStripeVarients(paymentPlan);
                    }

                    try
                    {
                        //Store into redis cache & return:
                        cache.HashSet(PaymentPlansHash.Key, redisHashField, JsonConvert.SerializeObject(paymentPlans), When.Always, CommandFlags.FireAndForget);
                        //con.Close();
                    }
                    catch
                    {

                    }

                    return paymentPlans;
                }
                else
                {
                    return paymentPlansCache;
                }
            }
            catch(Exception e)
            {
                //Log exception and email platform admins
                PlatformExceptionsHelper.LogExceptionAndAlertAdmins(
                    e,
                    "attempting to get payment plans",
                    System.Reflection.MethodBase.GetCurrentMethod()
                );

                //Potential caching error, retry without cache
                var paymentPlans = Sql.Statements.SelectStatements.SelectPaymentPlans(includeHiddenPlans, orderByRateAsc);

                //Assign alternate rates:
                foreach (var paymentPlan in paymentPlans)
                {
                    paymentPlan.AlternateRates = Internal.AlternateRates.AssignAlternateRates(paymentPlan.MonthlyRate);
                }

                return paymentPlans;
            }
        }

        public static List<PaymentFrequency> GetPaymentFrequencies(bool useCachedVersion = true)
        {

            //IDatabase cache = Sahara.Core.Settings.Azure.Redis.RedisMultiplexers.AccountManager_Multiplexer.GetDatabase();
            IDatabase cache = Sahara.Core.Settings.Azure.Redis.RedisMultiplexers.RedisMultiplexer.GetDatabase();
            string redisHashField = PaymentPlansHash.Fields.PaymentFrequenciesList();
            List<PaymentFrequency> paymentFrequenciesCache = null;

            if (useCachedVersion)
            {
                try
                {
                    var redisValue = cache.HashGet(PaymentPlansHash.Key, redisHashField); 
                    if (redisValue.HasValue)
                    {
                        paymentFrequenciesCache = JsonConvert.DeserializeObject<List<PaymentFrequency>>(redisValue);
                    }
                }
                catch
                {

                }

            }

            if (paymentFrequenciesCache == null)
            {
                var paymentFrequencies = Sql.Statements.SelectStatements.SelectPaymentFrequencies();

                try
                {
                    cache.HashSet(PaymentPlansHash.Key, redisHashField, JsonConvert.SerializeObject(paymentFrequencies), When.Always, CommandFlags.FireAndForget);
                }
                catch
                {

                }

                return paymentFrequencies;
            }
            else
            {
                return paymentFrequenciesCache;
            }

        }

        #endregion

        #region Single Objects

        public static PaymentPlan GetPaymentPlan(string planName)
        {
            //ConnectionMultiplexer con = ConnectionMultiplexer.Connect(Sahara.Core.Settings.Azure.Redis.RedisConnections.AccountManager_RedisConfiguration);
            //IDatabase cache = con.GetDatabase();
            //IDatabase cache = Sahara.Core.Settings.Azure.Redis.RedisMultiplexers.AccountManager_Multiplexer.GetDatabase();
            IDatabase cache = Sahara.Core.Settings.Azure.Redis.RedisMultiplexers.RedisMultiplexer.GetDatabase();

            string redisHashField = PaymentPlansHash.Fields.PaymentPlan(planName);

            PaymentPlan paymentPlanCache = null;

            try
            {
                var redisValue = cache.HashGet(PaymentPlansHash.Key, redisHashField); 
                if (redisValue.HasValue)
                {
                    paymentPlanCache = JsonConvert.DeserializeObject<PaymentPlan>(redisValue);
                }
            }
            catch
            {

            }

            if (paymentPlanCache == null)
            {
                var paymentPlan = Sql.Statements.SelectStatements.SelectPaymentPlan(planName);

                //Assign alternate rates:
                paymentPlan.AlternateRates = Internal.AlternateRates.AssignAlternateRates(paymentPlan.MonthlyRate);

                try
                {
                    //Store into redis cache:
                    cache.HashSet(PaymentPlansHash.Key, redisHashField, JsonConvert.SerializeObject(paymentPlan), When.Always, CommandFlags.FireAndForget);
                    //con.Close();
                }
                catch
                {

                }

                return paymentPlan;
            }
            else
            {
                return paymentPlanCache;
            }


        }
        
        public static PaymentFrequency GetPaymentFrequency(string frequencyMonths)
        {
            //ConnectionMultiplexer con = ConnectionMultiplexer.Connect(Sahara.Core.Settings.Azure.Redis.RedisConnections.AccountManager_RedisConfiguration);
            //IDatabase cache = con.GetDatabase();
            //IDatabase cache = Sahara.Core.Settings.Azure.Redis.RedisMultiplexers.AccountManager_Multiplexer.GetDatabase();
            IDatabase cache = Sahara.Core.Settings.Azure.Redis.RedisMultiplexers.RedisMultiplexer.GetDatabase();

            string redisHashField = PaymentPlansHash.Fields.PaymentFrequency(frequencyMonths);

            PaymentFrequency paymentFrequencyCache = null;

            try
            {
                var redisValue = cache.HashGet(PaymentPlansHash.Key, redisHashField); 
                if (redisValue.HasValue)
                {
                    paymentFrequencyCache = JsonConvert.DeserializeObject<PaymentFrequency>(redisValue);
                }
            }
            catch
            {

            }
            

            if (paymentFrequencyCache == null)
            {
                var paymentFrequency = Sql.Statements.SelectStatements.SelectPaymentFrequency(frequencyMonths);

                try
                {
                    //Store into redis cache:
                    cache.HashSet(PaymentPlansHash.Key, redisHashField, JsonConvert.SerializeObject(paymentFrequency), When.Always, CommandFlags.FireAndForget);
                    //con.Close();
                }
                catch
                {

                }


                return paymentFrequency;
            }
            else
            {
                return paymentFrequencyCache;
            }
        }

        #endregion

        #endregion

        #region Create

        public static DataAccessResponseType CreatePaymentPlan(PaymentPlan paymentPlan)
        {

            var response = new DataAccessResponseType();
            var stripeManager = new StripeManager();
            var frequencies = GetPaymentFrequencies();

            #region Validate Input

            //Validate Plan Name
            var validationResponse = ValidationManager.IsValidPaymentPlanName(paymentPlan.PaymentPlanName);

            if (!validationResponse.isValid)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = validationResponse.validationMessage};
            }


            if(paymentPlan.MaxCategorizationsPerSet > 80)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Categories cannot be grouped in amounts greater than 80 per set" };
            }

            if (paymentPlan.MaxProductsPerSet > 300)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Products cannot be grouped in amounts greater than 300 per set" };
            }

            if (paymentPlan.MaxProperties > 160)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot have more than 160 properties on an account" };
            }

            if (paymentPlan.MaxValuesPerProperty > 60)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot have more than 60 values per property on an account" };
            }

            if (paymentPlan.MaxTags > 5000)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot have more than 5000 tags on an account" };
            }

            if (paymentPlan.MaxUsers > 300)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot have more than 300 users on an account" };
            }

            if (paymentPlan.MaxImageGroups > 60)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot have more than 60 image groups on an account" };
            }

            if (paymentPlan.MaxImageFormats > 240)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot have more than 240 image formats on an account" };
            }

            if (paymentPlan.MaxImageGalleries > 30)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot have more than 30 image galleries on an account" };
            }

            if (paymentPlan.MaxImagesPerGallery > 50)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot have more than 50 images per gallery on an account" };
            }

            #endregion

            #region 1. STRIPE transaction (if applicable)

            if (paymentPlan.MonthlyRate != 0)
            {
                //Add to stripe first, if fails, respond with error and stop the process.
                foreach (PaymentFrequency frequency in frequencies)
                {
                    // We ignore any payment plans that have no cost and or frequencies that are set to 0
                    // Stripe is only used to manage plans that have a cost associated to it above 0.0
                    if (frequency.PaymentFrequencyMonths != 0)
                    {
                        //Create the new Stripe plan ID
                        var id = Sahara.Core.Common.Methods.Billing.GenerateStripePlanID(paymentPlan.PaymentPlanName, frequency.IntervalCount, frequency.Interval);

                        //Check if plan exists in Stripe, return an error if it does
                        if (stripeManager.PlanExists(id).isSuccess)
                        {
                            return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Plan variant exists on Stripe. Operation aborted." };
                        }

                        //Create the rest of the new Stripe plan
                        var name = Sahara.Core.Common.Methods.Billing.GenerateStripePlanName(paymentPlan.PaymentPlanName, frequency.PaymentFrequencyName);
                        var amount = Sahara.Core.Common.Methods.Billing.GenerateStripePlanAmountInCents(paymentPlan.MonthlyRate, frequency.PaymentFrequencyMonths, frequency.PriceBreak);

                        try
                        {
                            stripeManager.CreatePlan(
                                id,
                                name,
                                amount,
                                frequency.Interval,
                                frequency.IntervalCount
                                );
                        }
                        catch(Exception e)
                        {
                            //Log exception and email platform admins
                            PlatformExceptionsHelper.LogExceptionAndAlertAdmins(
                                e,
                                "attempting to create a payment plan on Stripe",
                                System.Reflection.MethodBase.GetCurrentMethod()
                            );

                            return new DataAccessResponseType { isSuccess = false, ErrorMessage = "An error occurred while attempting to add a plan varient to Stripe. Operation aborted." };               
                        }
                        
                    }
                }

            }
            else
            {
            }

            #endregion

            #region 2. SQL Transaction

            try
            {
                response.isSuccess = Sql.Statements.InsertStatements.InsertPaymentPlan(paymentPlan.PaymentPlanName, paymentPlan.Visible, paymentPlan.MonthlyRate, paymentPlan.MaxUsers,
                    paymentPlan.MaxCategorizationsPerSet, paymentPlan.MaxProductsPerSet, paymentPlan.MaxProperties, paymentPlan.MaxValuesPerProperty, paymentPlan.MaxTags, paymentPlan.AllowSalesLeads,
                    paymentPlan.MonthlySupportHours, paymentPlan.AllowLocationData, paymentPlan.AllowCustomOrdering, paymentPlan.AllowThemes, paymentPlan.AllowImageEnhancements, paymentPlan.MaxImageGroups, paymentPlan.MaxImageFormats, paymentPlan.MaxImageGalleries, paymentPlan.MaxImagesPerGallery).isSuccess;
                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches();
                return response;
            }
            catch(Exception e)
            {
                //Log exception and email platform admins
                PlatformExceptionsHelper.LogExceptionAndAlertAdmins(
                    e,
                    "attempting to insert a payment plan into SQL",
                    System.Reflection.MethodBase.GetCurrentMethod()
                );

                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Stripe transaction was successful, but there was an issue while attempting to add plan to the database. Operation aborted. " + e.Message};
            }

            #endregion

        }

        #endregion

        #region Update

        /*
        public static DataAccessResponseType UpdatePlanName(string paymentPlanName, string newName)
        {
            var response = new DataAccessResponseType();
            var stripeManager = new StripeManager();

            var paymentPlan = GetPaymentPlan(paymentPlanName);
            var frequencies = GetPaymentFrequencies();


            #region Validate Input

            response = Internal.Validation.PaymentPlanNameValid(newName);
            if(!response.isSuccess)
            {
                return response;
            }
            
            #endregion

            #region 1. STRIPE transaction (if applicable)

            if (paymentPlan.MonthlyRate != 0)
            {
                //Add to stripe first, if fails, respond with error and stop the process.
                foreach (PaymentFrequency frequency in frequencies)
                {
                    // We ignore any payment plans that have no cost and or frequencies that are set to 0
                    // Stripe is only used to manage plans that have a cost associated to it above 0.0
                    if (frequency.PaymentFrequencyMonths != 0)
                    {
                        //Create the new and old Stripe plan ID's
                        var newStripeName = Sahara.Core.Common.Methods.PaymentPlans.GenerateStripePlanID(newName, frequency.PaymentFrequencyName);
                        var currentStripeName = Sahara.Core.Common.Methods.PaymentPlans.GenerateStripePlanID(paymentPlan.PaymentPlanName, frequency.PaymentFrequencyName);

                        //Check if plan exists in Stripe, return an error if it does
                        if (stripeManager.PlanExists(newStripeName).isSuccess)
                        {
                            return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Plan variant exists on Stripe. Operation aborted." };
                        }

                        //Cretae the rest of the new Stripe plan
                        var name = Sahara.Core.Common.Methods.PaymentPlans.GenerateStripePlanName(paymentPlan.PaymentPlanName, frequency.PaymentFrequencyName);
                        var amount = Sahara.Core.Common.Methods.PaymentPlans.GenerateStripePlanAmountInCents(paymentPlan.MonthlyRate, frequency.PaymentFrequencyMonths, frequency.PriceBreak);

                        try
                        {
                            stripeManager.UpdatePlanName(
                                currentStripeName,
                                newStripeName
                                );
                        }
                        catch (Exception e)
                        {
                            return new DataAccessResponseType { isSuccess = false, ErrorMessage = "An error occurred while attempting to update a plan varient name to Stripe. Operation aborted." };
                        }

                    }
                }

            }
            else
            {
            }

            #endregion

            #region SQL Transaction

            try
            {
                //Start SQL Transaction
                Sql.Statements.UpdateStatements.UpdatePlanName(paymentPlanName, newName);

                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches();
                return response;
            }
            catch(Exception e)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "The was an issue updating the database. Operation aborted. " + e.Message };
            }

            #endregion

        }
        */

        public static DataAccessResponseType UpdatePlanVisibility(string paymentPlanName, bool newVisibility)
        {

            #region Validate Input

            //Is this already the plans visibility? return error if true.

            #endregion

            bool sqlTransactionSucceeded = false;

            #region SQL Transaction

            //Start SQL Transaction
            sqlTransactionSucceeded = Sql.Statements.UpdateStatements.UpdatePlanVisibility(paymentPlanName, newVisibility);

            #endregion

            if (sqlTransactionSucceeded)
            {
                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches();
                return new DataAccessResponseType { isSuccess = true };
            }
            else
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "There was an issue updating the database." };
            }
        }

        #region Limitations

        public static DataAccessResponseType UpdatePlanMaxUsers(string paymentPlanName, int newLimit)
        {
            #region Validate Input
            
            if (newLimit < 0)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Must be a positive number." };
            }

            #endregion


            bool sqlTransactionSucceeded = false;

            #region SQL Transaction

            //Start SQL Transaction
            sqlTransactionSucceeded = Sql.Statements.UpdateStatements.UpdateMaxUsers(paymentPlanName, newLimit);

            #endregion

            if (sqlTransactionSucceeded)
            {
                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches(true);
                return new DataAccessResponseType { isSuccess = true };
            }
            else
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "There was an issue updating the database." };
            }
        }

        public static DataAccessResponseType UpdatePlanMaxCategories(string paymentPlanName, int newLimit)
        {

            #region Validate Input

            if (newLimit < 0)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Must be a positive number." };
            }

            #endregion


            bool sqlTransactionSucceeded = false;

            #region SQL Transaction

            //Start SQL Transaction
            sqlTransactionSucceeded = Sql.Statements.UpdateStatements.UpdateMaxCategories(paymentPlanName, newLimit);

            #endregion

            if (sqlTransactionSucceeded)
            {
                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches(true);
                return new DataAccessResponseType { isSuccess = true };
            }
            else
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "There was an issue updating the database." };
            }
        }

        public static DataAccessResponseType UpdatePlanMaxSubcategories(string paymentPlanName, int newLimit)
        {
            #region Validate Input

            if (newLimit < 0)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Must be a positive number." };
            }

            #endregion


            bool sqlTransactionSucceeded = false;

            #region SQL Transaction

            //Start SQL Transaction
            sqlTransactionSucceeded = Sql.Statements.UpdateStatements.UpdateMaxSubcategories(paymentPlanName, newLimit);

            #endregion

            if (sqlTransactionSucceeded)
            {
                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches(true);
                return new DataAccessResponseType { isSuccess = true };
            }
            else
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "There was an issue updating the database." };
            }
        }

        public static DataAccessResponseType UpdatePlanMaxTags(string paymentPlanName, int newLimit)
        {
            #region Validate Input

            if (newLimit < 0)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Must be a positive number." };
            }

            #endregion


            bool sqlTransactionSucceeded = false;

            #region SQL Transaction

            //Start SQL Transaction
            sqlTransactionSucceeded = Sql.Statements.UpdateStatements.UpdateMaxTags(paymentPlanName, newLimit);

            #endregion

            if (sqlTransactionSucceeded)
            {
                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches(true);
                return new DataAccessResponseType { isSuccess = true };
            }
            else
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "There was an issue updating the database." };
            }
        }

        public static DataAccessResponseType UpdatePlanMaxImages(string paymentPlanName, int newLimit)
        {
            #region Validate Input

            if (newLimit < 0)
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "Must be a positive number." };
            }

            #endregion


            bool sqlTransactionSucceeded = false;

            #region SQL Transaction

            //Start SQL Transaction
            sqlTransactionSucceeded = Sql.Statements.UpdateStatements.UpdateMaxImages(paymentPlanName, newLimit);

            #endregion

            if (sqlTransactionSucceeded)
            {
                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches(true);
                return new DataAccessResponseType { isSuccess = true };
            }
            else
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "There was an issue updating the database." };
            }
        }

        public static DataAccessResponseType UpdatePlanAllowImageEnhancements(string paymentPlanName, bool allowEnhancements)
        {

            #region Validate Input

            //Is this already the plans visibility? return error if true.

            #endregion

            bool sqlTransactionSucceeded = false;

            #region SQL Transaction

            //Start SQL Transaction
            sqlTransactionSucceeded = Sql.Statements.UpdateStatements.UpdatePlanAllowImageEnhancements(paymentPlanName, allowEnhancements);

            #endregion

            if (sqlTransactionSucceeded)
            {
                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches(true);
                return new DataAccessResponseType { isSuccess = true };
            }
            else
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "There was an issue updating the database." };
            }
        }

        #endregion

        #endregion

        #region Delete

        public static DataAccessResponseType DeletePaymentPlan(string paymentPlanName)
        {
            var stripeManager = new StripeManager();
            var paymentPlan = GetPaymentPlan(paymentPlanName);
            var frequencies = GetPaymentFrequencies();

            #region Validate Plan Deletion

            if (paymentPlanName.ToLower() == "unprovisioned")
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot delete the unprovisioned plan." };
            }

            if (paymentPlanName.ToLower().Contains("trial") || paymentPlanName.ToLower().Contains("free"))
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot delete the Free or Trial plans." };
            }

            //Check if any accounts belong to the plan on SQL before deleting
            if (Sql.Statements.SelectStatements.AccountsWithPlanExists(paymentPlanName))
            {
                return new DataAccessResponseType { isSuccess = false, ErrorMessage = "You cannot delete a plan that has accounts associated to it." };
            }

            #endregion


            #region 1. Delete each plan/frequency varient on Stripe (if applicable)

            if (paymentPlan.MonthlyRate != 0)
            {
                //If paid account, delete each varient (only paid accounts are on Stripe)
                foreach (var frequency in frequencies)
                {
                    if (frequency.PaymentFrequencyMonths != 0)
                    {
                        try
                        {
                            stripeManager.DeletePlan(Common.Methods.Billing.GenerateStripePlanID(paymentPlan.PaymentPlanName, frequency.IntervalCount, frequency.Interval));
                        }
                        catch(Exception e)
                        {
                            //Log exception and email platform admins
                            PlatformExceptionsHelper.LogExceptionAndAlertAdmins(
                                e,
                                "attempting to delete a payment plan on Stripe",
                                System.Reflection.MethodBase.GetCurrentMethod()
                            );
                        }
                    }
                }
            }

            #endregion

            #region 2. Delete the plan on SQL

            try
            {
                var isSuccess = Sql.Statements.DeleteStatements.DeletePlan(paymentPlanName);

                //Clear the cache and return results:
                PaymentPlanCaching.InvalidateAllCaches();
                return new DataAccessResponseType { isSuccess = isSuccess };
            }
            catch(Exception e)
            {
                //Log exception and email platform admins
                PlatformExceptionsHelper.LogExceptionAndAlertAdmins(
                    e,
                    "attempting to delete a payment plan in SQL",
                    System.Reflection.MethodBase.GetCurrentMethod()
                );

                return new DataAccessResponseType
                {
                    isSuccess = false,
                    ErrorMessage = "An error occured while attempting to delete the plan on the databse. " + e.Message,
                };
            }

            #endregion

            
        }

        #endregion

        #region Bulk Stripe Parity

        /// <summary>
        /// Used to Seed Stripe during platform initialization
        /// </summary>
        /// <returns></returns>
        public static DataAccessResponseType DuplicatePlansToStripe()
        {
            var response = new DataAccessResponseType();

            var stripeManager = new StripeManager();

            //Get Plans & Frequencies to initialize plans on Stripe:
            var paymentPlans = GetPaymentPlans(true, true, false);
            var paymentFrequencies = GetPaymentFrequencies(false);

            foreach (PaymentPlan paymentPlan in paymentPlans)
            {
                foreach (PaymentFrequency paymentFrequency in paymentFrequencies)
                {
                    // We ignore any payment plans that have no cost and or frequencies that are set to 0
                    // Stripe is only used to manage plans that have a cost associated to it above 0.0
                    if (paymentPlan.MonthlyRate != 0 && paymentFrequency.PaymentFrequencyMonths != 0)
                    {

                        //Create the new Stripe plan ID
                        var id = Sahara.Core.Common.Methods.Billing.GenerateStripePlanID(paymentPlan.PaymentPlanName, paymentFrequency.IntervalCount, paymentFrequency.Interval);

                        //Check if plan exists in Stripe, delete if it does:
                        if (stripeManager.PlanExists(id).isSuccess)
                        {
                            stripeManager.DeletePlan(id);
                        }


                        //Cretae the rest of the new Stripe plan
                        var name = Sahara.Core.Common.Methods.Billing.GenerateStripePlanName(paymentPlan.PaymentPlanName, paymentFrequency.PaymentFrequencyName);
                        var amount = Sahara.Core.Common.Methods.Billing.GenerateStripePlanAmountInCents(paymentPlan.MonthlyRate, paymentFrequency.PaymentFrequencyMonths, paymentFrequency.PriceBreak);

                        stripeManager.CreatePlan(
                            id,
                            name,
                            amount,
                            paymentFrequency.Interval,
                            paymentFrequency.IntervalCount
                            );

                        response.isSuccess = true;
                    }
                }
            }


            return response;
        }

        /// <summary>
        /// Used to update plan on Stripe
        /// </summary>
        /// <returns></returns>
        internal static DataAccessResponseType UpdatePlanOnStripe()
        {
            // Move to internal methods...
            return new DataAccessResponseType();
        }

        #endregion

    }
}
