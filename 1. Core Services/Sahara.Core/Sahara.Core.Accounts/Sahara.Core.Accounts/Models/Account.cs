using Sahara.Core.Accounts.PaymentPlans.Models;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Sahara.Core.Accounts.Models
{
    [Serializable]
    [DataContract]
    public class Account
    {
        public Account()
        {

        }

        #region Basic Properties

        [DataMember]
        public Guid AccountID { get; set; }

        [DataMember]
        public string AccountName { get; set; }

        [DataMember]
        public string AccountNameKey { get; set; }

        [DataMember]
        public string PhoneNumber { get; set; }

        [DataMember]
        public string Logo { get; set; }

        #region Booleans

        [DataMember]
        public bool Active { get; set; } //<--  Used for billing lapses and other issues. Not used for closed accounts: account remains active until the AccountEndDate is reached.

        [DataMember]
        public bool Activated { get; set; } //<-- If False means that user submitted for DEMO but is not signed up for a PLAN yet

        [DataMember]
        public bool Provisioned { get; set; }

        [DataMember]
        public bool Locked { get; set; }

        [DataMember]
        public bool ClosureApproved { get; set; }

        [DataMember]
        public bool Closed { get; set; }

        #endregion


        #endregion

        #region Billing & Plan Properties


        /* ===============================
         * PaymentPlan Properties
         * ===============================*/

        [DataMember]
        public string PaymentPlanName { get; set; }

        [DataMember]
        public int PaymentFrequencyMonths { get; set; } //<-- Months (1 = Monthly | 12 = Yearly)


        /* ===============================
         * Stripe Identification Properties
         * ===============================*/

        [DataMember]
        public string StripeCustomerID { get; set; } //<-- The Stripe Customer ID, if NULL indicates that account has not made any monetary transactions yet
        [DataMember]
        public string StripeSubscriptionID { get; set; } //<-- The Stripe Subscription ID, if NULL indicates that a payed subscription has not been created yet. Subscription contains an PlanId (AKA PaymentPlanName-PaymentFrequencyName)
        [DataMember]
        public string StripeCardID { get; set; } //<-- The Stripe Customers Credit Card ID, if NULL indicates that account has not made any monetary transactions yet and/or does not have a card on file
        [DataMember]
        public string StripePlanID { get; set; }

        /* ===============================
         * Stripe Related Properties
         * ===============================*/

        [DataMember]
        public DateTime CardExpiration { get; set; } //<-- Used for dunning purposes by the Custodian

        [DataMember]
        public int Credits { get; set; } //<-- Amount of credits available (outside of subscriptions)

        [DataMember]
        public bool Delinquent { get; set; } //<-- Markes if a Stripe Customer is 'Delinquent' or if a Customer Subscription is 'Past_Due' (status=past_due)
        //[DataMember]
        //public bool Unpaid { get; set; } //<-- Markes if the Stripe Subscription associated with this Account/Customer is 'Unpaid' (status=unpaid)


        #endregion

        #region Data Store Properties

        [DataMember]
        public string DocumentPartition { get; set; }

        [DataMember]
        public string SearchPartition { get; set; }

        [DataMember]
        public string StoragePartition { get; set; }

        [DataMember] //Index is now names after the accountnameshort
        public string ProductSearchIndex { get; set; }

        // DocumentDB SelfLinks----------------------------------------

        //[DataMember]
        //public string DocumentDatabaseLink { get; set; } //<-- Every account has a database within DocumentDB (Id = AccountID) that is generated upon account creation

        //[DataMember]
        //public string PropertiesCollectionLink { get; set; } //<-- Every account has a DocumentCollection called "AccountProperties" within their DocumentDB partition

        //[DataMember]
        //public string SelfLinkReferencesDocumentLink { get; set; } //<-- SelfLink to the "SelfLinkReferences" Document within "AccountProperties" collection with pointers to ALL SelfLinks for this account.

        // Generated DocumentModel of SelfLinks----------------------------------------

        //[DataMember]
        //public SelfLinkReferencesDocumentModel SelfLinks { get; set; } //<-- Model Generated by reading "SelfLinkReferences" from "AccountProperties" collecion (SelfLink above)

        // SQL PARTITION (If Applicable)------------------------

        [DataMember]
        public string SqlPartition { get; set; } //<--Switch thi AND database column to "SQLPartition"

        [DataMember]
        public string SchemaName { get; set; }  

        #endregion

        #region DateTime Properties


        [DataMember]
        public DateTime? LockedDate { get; set; }  //<-- Nullable / Uses: HasValue

        // Make sure all DateTimes are Nullable to avoid issues with Azure Table Storage
        [DataMember]
        public DateTime CreatedDate { get; set; }


        [DataMember]
        public DateTime? ProvisionedDate { get; set; }  //<-- Nullable / Uses: HasValue

        [DataMember]
        public DateTime? AccountEndDate { get; set; }  //<-- Nullable / Uses: HasValue (Used for account closures, Markes that closure is scheduled)
        //public DateTime? NextPaymentDate { get; set;} 
        //public DateTime? LastPaymentDate { get; set;}


        #endregion

        #region Derived Properties


        [DataMember]
        public string AccountManagementUrl { get; set; }

        [DataMember]
        public string AccountApiUrl { get; set; }

        [DataMember]
        public string AccountSiteUrl { get; set; }

        [DataMember]
        public AccountStatus AccountStatus { get; set; }

        [DataMember]
        public string AccountStatusString { get; set; }


        #endregion

        #region External Classes

        [DataMember]
        public virtual List<AccountUser> Users { get; set; }

        [DataMember]
        public virtual PaymentPlan PaymentPlan { get; set; }

        [DataMember]
        public virtual PaymentFrequency PaymentFrequency { get; set; }

        #endregion

        #region Internal Methods


        public void Update()
        {



            SetStripePlanID();

            if(Provisioned)
            {
                this.SchemaName = Common.Methods.SchemaNames.AccountIdToSchemaName(this.AccountID.ToString());
                this.AccountManagementUrl = AccountNameKey + "." + Settings.Endpoints.URLs.AccountManagementDomain;
                this.AccountSiteUrl = AccountNameKey + "." + Settings.Endpoints.URLs.AccountSiteDomain;
                this.AccountApiUrl = AccountNameKey + "." + Settings.Endpoints.URLs.AccountServiceDomain;
                this.DocumentPartition = AccountNameKey;
                this.ProductSearchIndex = AccountNameKey; // + "-products";
            }

            
            if (this.Active)
            {
                AccountStatus = AccountStatus.Active;
            }
            else if (!this.Provisioned)
            {
                AccountStatus = AccountStatus.Unprovisioned;
            }
            else
            {
                AccountStatus = AccountStatus.Inactive;
            }


            //Override above if account is delinquent
            if (this.Delinquent)
            {
                AccountStatus = AccountStatus.PastDue;
            }
            //Override above if account is unpaid
            if (this.Delinquent && this.Active == false)
            {
                AccountStatus = AccountStatus.Unpaid;
            }


            //Override above status if the account is marked for closure
            if(Closed)
            {
                AccountStatus = AccountStatus.Closed;
            }
            

            AccountStatusString = AccountStatus.ToString();
        }



        internal void SetStripePlanID()
        {
            if(PaymentPlan.MonthlyRate > 0)
            {
                try
                {
                    this.StripePlanID = Sahara.Core.Common.Methods.Billing.GenerateStripePlanID(PaymentPlan.PaymentPlanName, PaymentFrequency.IntervalCount, PaymentFrequency.Interval);
                }
                catch
                {
                    this.StripePlanID = null;
                }
            }
            else
            {
                this.StripePlanID = null;
            }
            
        }


        #endregion

    }

    #region Enums

    [Serializable]
    public enum AccountStatus
    {
        Unprovisioned,  // <--  Registered, but not yet subscribed and/or provisioned
        Active,         // <--  Subscribed, Provisioned & in good standing
        Inactive,       // <--  Provisioned & Provisioned but no longer active
        PastDue,        // <--  On a payment plan, has had a payment to Stripe failed. Currently in the dunning process
        Unpaid,         // <--  On a payment plan, has exhausted all dunning attemps and Stripe payment attempts. Subscription is now closed by Stripe
        Closed,         // <--  Marked for closure, pased warning window (Custodian will close account on next cycle)
    }

    #endregion

}
